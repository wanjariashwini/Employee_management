"""
This service is used for flak app
"""

import json
import uuid
from json import JSONEncoder
from random import Random


class Employee():
    def __init__(self, id, name, email):
        self.id = id
        self.name = name
        self.email = email


class EmployeeEncoder(JSONEncoder):
    def default(self, obj):
        return obj.__dict__

list_my = []
emp_dic = {}

employee_dic = {}
list_my = []

emp1 = Employee(1, "ravi", "ravi@gmail.com")
emp2 = Employee(2, "pratik", "pratik@gmail.com")
emp3 = Employee(3, "mahesh", "mahesh@gmail.com")

employee_dic[emp1.email] = emp1.__dict__
employee_dic[emp2.email] = emp2.__dict__
employee_dic[emp3.email] = emp3.__dict__


print(EmployeeEncoder().encode(employee_dic))
print(json.dumps(employee_dic, cls=EmployeeEncoder))

list_my.append(emp1.__dict__)
list_my.append(emp2.__dict__)
list_my.append(emp3.__dict__)

print(EmployeeEncoder().encode(list_my))
print(json.dumps(list_my, cls=EmployeeEncoder))

#https://changsin.medium.com/how-to-serialize-a-class-object-to-json-in-python-849697a0cd3
# key- email value-empObject
#https://pynative.com/make-python-class-json-serializable/

def get_all_employee_data():
    return list_my

def get_all_employee_data_list():
    return json.dumps(list_my, cls=EmployeeEncoder)

def register_employee_data(json_data):
    flag = False
    if json_data:
        emp_id = uuid.uuid4()
        emp_temp = Employee(emp_id, json_data.get("name"), json_data.get("email"))
        list_my.append(emp_temp.__dict__)
        flag = True
    return flag

def convert_json_to_emp(json_data):
    emp_id = uuid.uuid4()
    return Employee(emp_id, json_data.get("name"), json_data.get("email"))

def update_employee_data(json_data, id):
     flag = False
     if json_data and id:
         print(id)
         for emp in list_my:
             if emp.get("id") == id:
                 index = list_my.index(emp)
                 email1 = json_data.get("email")
                 name1 = json_data.get("name")
                 temp = Employee(id, name1, email1)
                 list_my[index] = temp.__dict__
                 print(list_my)
                 flag = True
     return flag

def delete_employee_data(email):
    flag = False
    for emp in list_my:
        if emp.get("email") == email:
            list_my.remove(emp)
            #index = list_my.index(emp)
            #del list_my[index]
            flag = True
    return flag


def get_employee_data(email):
    for emp in list_my:
        if emp.get("email") == email:
            print("email: " + str(emp.get("name")))
            index = list_my.index(emp)
            emp_delete = list_my.__getitem__(index)
            return emp_delete
    return None

def is_valid_user(args):
        username = args.get("username", type=str)
        #args.get("username", default="", type=str)
        password = args.get("password", type=str)
        if username == "ash" and password == "amol":
            return True
        else:
            return False








